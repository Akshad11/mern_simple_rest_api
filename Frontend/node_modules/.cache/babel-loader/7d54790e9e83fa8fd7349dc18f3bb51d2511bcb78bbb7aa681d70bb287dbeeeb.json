{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\OneDrive\\\\Desktop\\\\vs code\\\\React\\\\my-app\\\\src\\\\check.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YouTubeSubscriberCount = _ref => {\n  _s();\n  let {\n    AIzaSyDnQnC0TzwCC_kaH2NJfdZG61kEfAeRM3Q\n  } = _ref;\n  const [channelLink, setChannelLink] = useState('');\n  const [channelId, setChannelId] = useState(null);\n  const [subscriberCount, setSubscriberCount] = useState(0);\n\n  // Parse the channel ID from a YouTube channel link\n  const getChannelId = channelLink => {\n    const regex = /(?:\\/channel\\/|\\/user\\/)([a-zA-Z0-9_-]{24})/;\n    const matches = regex.exec(channelLink);\n    const channelId = matches ? matches[1] : null;\n    return channelId;\n  };\n\n  // Retrieve the subscriber count for a given channel ID using the YouTube Data API\n  const getSubscriberCount = channelId => {\n    if (!channelId) {\n      return;\n    }\n    const url = `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${AIzaSyDnQnC0TzwCC_kaH2NJfdZG61kEfAeRM3Q}`;\n    fetch(url).then(response => response.json()).then(data => {\n      const newSubscriberCount = parseInt(data.items[0].statistics.subscriberCount);\n      setSubscriberCount(newSubscriberCount);\n    }).catch(error => {\n      console.error(\"An error occurred while fetching data from the YouTube Data API:\", error);\n    });\n  };\n\n  // Handle the form submission\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newChannelId = getChannelId(channelLink);\n    setChannelId(newChannelId);\n    getSubscriberCount(newChannelId);\n  };\n\n  // Handle the count check button click\n  const handleCountCheck = () => {\n    getSubscriberCount(channelId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Subscriber Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"channelLinkInput\",\n        children: \"Enter a YouTube channel link:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"channelLinkInput\",\n        value: channelLink,\n        onChange: event => setChannelLink(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), channelId && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total number of subscribers: \", subscriberCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Channel link: https://www.youtube.com/channel/\", channelId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCountCheck,\n        children: \"Check count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(YouTubeSubscriberCount, \"lSdrGFCS0Y89sLGG5NfvxwBoTKE=\");\n_c = YouTubeSubscriberCount;\nexport default YouTubeSubscriberCount;\nvar _c;\n$RefreshReg$(_c, \"YouTubeSubscriberCount\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","YouTubeSubscriberCount","_ref","_s","AIzaSyDnQnC0TzwCC_kaH2NJfdZG61kEfAeRM3Q","channelLink","setChannelLink","channelId","setChannelId","subscriberCount","setSubscriberCount","getChannelId","regex","matches","exec","getSubscriberCount","url","fetch","then","response","json","data","newSubscriberCount","parseInt","items","statistics","catch","error","console","handleSubmit","event","preventDefault","newChannelId","handleCountCheck","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aksha/OneDrive/Desktop/vs code/React/my-app/src/check.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst YouTubeSubscriberCount = ({ AIzaSyDnQnC0TzwCC_kaH2NJfdZG61kEfAeRM3Q }) => {\r\n    const [channelLink, setChannelLink] = useState('');\r\n    const [channelId, setChannelId] = useState(null);\r\n    const [subscriberCount, setSubscriberCount] = useState(0);\r\n\r\n    // Parse the channel ID from a YouTube channel link\r\n    const getChannelId = (channelLink) => {\r\n        const regex = /(?:\\/channel\\/|\\/user\\/)([a-zA-Z0-9_-]{24})/;\r\n        const matches = regex.exec(channelLink);\r\n        const channelId = matches ? matches[1] : null;\r\n        return channelId;\r\n    }\r\n\r\n    // Retrieve the subscriber count for a given channel ID using the YouTube Data API\r\n    const getSubscriberCount = (channelId) => {\r\n        if (!channelId) {\r\n            return;\r\n        }\r\n        const url = `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${AIzaSyDnQnC0TzwCC_kaH2NJfdZG61kEfAeRM3Q}`;\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const newSubscriberCount = parseInt(data.items[0].statistics.subscriberCount);\r\n                setSubscriberCount(newSubscriberCount);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"An error occurred while fetching data from the YouTube Data API:\", error);\r\n            });\r\n    }\r\n\r\n    // Handle the form submission\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newChannelId = getChannelId(channelLink);\r\n        setChannelId(newChannelId);\r\n        getSubscriberCount(newChannelId);\r\n    }\r\n\r\n    // Handle the count check button click\r\n    const handleCountCheck = () => {\r\n        getSubscriberCount(channelId);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>YouTube Subscriber Count</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"channelLinkInput\">Enter a YouTube channel link:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"channelLinkInput\"\r\n                    value={channelLink}\r\n                    onChange={(event) => setChannelLink(event.target.value)}\r\n                />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            {channelId && (\r\n                <div>\r\n                    <p>Total number of subscribers: {subscriberCount}</p>\r\n                    <p>Channel link: https://www.youtube.com/channel/{channelId}</p>\r\n                    <button onClick={handleCountCheck}>Check count</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default YouTubeSubscriberCount; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,sBAAsB,GAAGC,IAAA,IAAiD;EAAAC,EAAA;EAAA,IAAhD;IAAEC;EAAwC,CAAC,GAAAF,IAAA;EACvE,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMa,YAAY,GAAIN,WAAW,IAAK;IAClC,MAAMO,KAAK,GAAG,6CAA6C;IAC3D,MAAMC,OAAO,GAAGD,KAAK,CAACE,IAAI,CAACT,WAAW,CAAC;IACvC,MAAME,SAAS,GAAGM,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;IAC7C,OAAON,SAAS;EACpB,CAAC;;EAED;EACA,MAAMQ,kBAAkB,GAAIR,SAAS,IAAK;IACtC,IAAI,CAACA,SAAS,EAAE;MACZ;IACJ;IACA,MAAMS,GAAG,GAAI,qEAAoET,SAAU,QAAOH,uCAAwC,EAAC;IAC3Ia,KAAK,CAACD,GAAG,CAAC,CACLE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACV,MAAMC,kBAAkB,GAAGC,QAAQ,CAACF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,UAAU,CAAChB,eAAe,CAAC;MAC7EC,kBAAkB,CAACY,kBAAkB,CAAC;IAC1C,CAAC,CAAC,CACDI,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,kEAAkE,EAAEA,KAAK,CAAC;IAC5F,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAME,YAAY,GAAIC,KAAK,IAAK;IAC5BA,KAAK,CAACC,cAAc,EAAE;IACtB,MAAMC,YAAY,GAAGrB,YAAY,CAACN,WAAW,CAAC;IAC9CG,YAAY,CAACwB,YAAY,CAAC;IAC1BjB,kBAAkB,CAACiB,YAAY,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3BlB,kBAAkB,CAACR,SAAS,CAAC;EACjC,CAAC;EAED,oBACIP,OAAA;IAAAkC,QAAA,gBACIlC,OAAA;MAAAkC,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACjCtC,OAAA;MAAMuC,QAAQ,EAAEV,YAAa;MAAAK,QAAA,gBACzBlC,OAAA;QAAOwC,OAAO,EAAC,kBAAkB;QAAAN,QAAA,EAAC;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACvEtC,OAAA;QACIyC,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,kBAAkB;QACrBC,KAAK,EAAEtC,WAAY;QACnBuC,QAAQ,EAAGd,KAAK,IAAKxB,cAAc,CAACwB,KAAK,CAACe,MAAM,CAACF,KAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1D,eACFtC,OAAA;QAAQyC,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAClC,EACN/B,SAAS,iBACNP,OAAA;MAAAkC,QAAA,gBACIlC,OAAA;QAAAkC,QAAA,GAAG,+BAA6B,EAACzB,eAAe;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACrDtC,OAAA;QAAAkC,QAAA,GAAG,gDAA8C,EAAC3B,SAAS;MAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAChEtC,OAAA;QAAQ8C,OAAO,EAAEb,gBAAiB;QAAAC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAE9D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAEd,CAAC;AAAAnC,EAAA,CAjEKF,sBAAsB;AAAA8C,EAAA,GAAtB9C,sBAAsB;AAmE5B,eAAeA,sBAAsB;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}